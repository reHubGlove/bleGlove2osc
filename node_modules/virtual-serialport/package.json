{
  "name": "virtual-serialport",
  "version": "0.2.1",
  "description": "A drop-in virtual replacement for node-serialport's SerialPort object",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "node test/test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/reyiyo/virtual-serialport"
  },
  "keywords": [
    "arduino",
    "serial",
    "testing",
    "robotics",
    "serialport"
  ],
  "author": {
    "name": "Sean Lee",
    "email": "freshdried@gmail.com",
    "url": "http://sean.lee.mx/"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/reyiyo/virtual-serialport/issues"
  },
  "readme": "# About this repo\n\nThis is an exact copy of the last code in https://github.com/freshdried/virtual-serialport.git, which is now deleted and we don't know why.\nWe made this copy and also published the npm package because we were using this module in several projects.\n\n\n# virtual-serialport\n\nDo you use [node-serialport](https://github.com/voodootikigod/node-serialport), but don't have your device connected for development or testing?\n\nvirtual-serialport provides a virtual drop-in replacement for an actual SerialPort object.\n\n## Examples\n\n```javascript\nvar SerialPort = require('node-serialport').SerialPort;\nif (process.env.NODE_ENV == 'development') {\n  SerialPort = require('virtual-serialport');\n}\n\nvar sp = new SerialPort('/dev/ttyUSB0', { baudrate: 57600 }); // still works if NODE_ENV is set to development!\n\nsp.on('open', function (err) {\n\n  sp.on(\"data\", function(data) {\n    console.log(\"From Arduino: \" + data);\n  });\n\n  if (process.env.NODE_ENV == 'development') {\n    sp.on(\"dataToDevice\", function(data) {\n      sp.writeToComputer(data + \" \" + data + \"!\");\n    });\n  }\n\n  sp.write(\"BLOOP\"); // \"From Arduino: BLOOP BLOOP!\"\n});\n```\n\n## Usage\n\n```javascript\nvar VirtualSerialPort = require('virtual-serialport');\nvar sp = new VirtualSerialPort(path, [opts={}]);\n```\n\ninstantiates a virtual SerialPort object. Currently does nothing with the parameters.\n\n```javascript\nvar sp = new VirtualSerialPort(\"/dev/ttyUSB0\");\n// No device has to actually exist at /dev/ttyUSB0 :)\n```\n\n### Computer to device communication\n\n```javascript\nsp.on(\"data\", function(data) {\n\tconsole.log(\"Computer says, \" + data);\n});\n\nsp.writeToComputer(\"BLEEP!\"); // \"Computer says, BLEEP!\"\n```\n\n### Device to computer communication\n\n```javascript\nsp.on(\"dataToDevice\", function(data) {\n\tconsole.log(\"Arduino says, \" + data):\n});\n\nsp.write(\"BLOOP!\"); // \"Arduino says, BLOOP!\"\n```\n\n### node-serialport methods/events:\n\n#### sp.write(data)\n\nWrites data to the virtual device. Equivalent to `sp.emit(\"dataToDevice\", data)`.\n\n#### sp.on(\"open\", function(err) { ... } )\n\nRuns function once `SerialPort` is ready, as you would with an actual `SerialPort` instance.\n\n#### sp.on(\"data\", function(data) { ... })\n\nAct on data sent to the computer, as you would with an actual `SerialPort` instance.\n\n### Non node-serialport methods/events:\n\n#### sp.writeToComputer(data);\n\nWrites data to computer. Equivalent to `sp.emit(\"data\", data)`\n\n#### sp.on(\"dataToDevice\", function(data) { ... })\nAct on data sent to the device.\n\n## TODO\n- move to automated testing (assertions and more)\n- better match voodootikigod's node-serialport api\n",
  "readmeFilename": "README.md",
  "_id": "virtual-serialport@0.2.1",
  "dist": {
    "shasum": "d7d20478ff67787d56d748883915866d7fa3b05d"
  },
  "_from": "virtual-serialport@",
  "_resolved": "https://registry.npmjs.org/virtual-serialport/-/virtual-serialport-0.2.1.tgz"
}

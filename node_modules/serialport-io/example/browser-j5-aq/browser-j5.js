/* global io,SocketIoSerialPort,five */
'use strict';

(function() {

  var stationSelect = document.getElementById('stations');
  var psiElem = document.getElementById('psi');
  var pm10Elem = document.getElementById('pm10');
  var pm25Elem = document.getElementById('pm25');
  var station = '松山';

  function getApiUrl() {
    return 'http://opendata.epa.gov.tw/ws/Data/AQX/' +
      '?$filter=SiteName%20eq%20%27' + encodeURIComponent(station) + '%27&' +
      '$orderby=SiteName&$skip=0&$top=1000&format=json';
  }

  stationSelect.addEventListener('change', function(e) {
    station = e.target.value;
    loadJSONP(getApiUrl());
  });

  var PSI_THRESHOLD = 100;
  var PM10_THRESHOLD = 150;
  var PM25_THRESHOLD = 53;

  function loadJSONP(url) {
    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.src = url + '&callback=onJsonpSuccess';
    document.getElementsByTagName('head')[0].appendChild(script);
  }

  var socket = io('ws://localhost:3000');

  var sp = new SocketIoSerialPort({
    client: socket,
    device: {   //put your device channel/address here
      channel: 'serial',
      address: '/dev/cu.usbmodem1411'
      //channel: 'ble',
      //name: 'BleFirmata',
      //address: 'd0:6a:cf:58:ee:bd'
    }
  });

  function indicate(led, value, threshold) {
    var indVal = value / threshold * 255;
    if (indVal < 255) {
      led.brightness(indVal);
    } else {
      led.brightness(255);
      led.blink(indVal / 255);
    }
  }

  sp.connect().then(function() {
    var board = new five.Board({port: sp, repl: false});
    board.on('ready', function() {
      console.log('Arduino connected!');
      var psiIndicator = five.Led(3);
      var pm10Indicator = five.Led(5);
      var pm25Indicator = five.Led(6);
      window.onJsonpSuccess = function(response) {
        if (response && response.length > 0) {
          var psi = parseInt(response[0].PSI);
          var pm10 = parseInt(response[0].PM10);
          var pm25 = parseInt(response[0]['PM2.5']);
          psiElem.textContent = psi;
          pm10Elem.textContent = Math.round(
              pm10 / PM10_THRESHOLD * 100) + ' (' + pm10 + 'μg/m3)';
          pm25Elem.textContent = Math.round(
              pm25 / PM25_THRESHOLD * 100) + ' (' + pm25 + 'μg/m3)';
          indicate(psiIndicator, psi, PSI_THRESHOLD);
          indicate(pm10Indicator, pm10, PM10_THRESHOLD);
          indicate(pm25Indicator, pm25, PM25_THRESHOLD);
        }
      };
      loadJSONP(getApiUrl());
      setInterval(function() {
        loadJSONP(getApiUrl());
      }, 1000 * 60);
    });
  });
})();

